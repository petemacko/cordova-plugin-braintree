{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/braintree/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8MzC,6BAAiB;;;;IAC9C;;;;;;OAMG;;;;;;;;IAIH,8BAAU;;;;;;;cAAC,KAAa;QACtB,MAAM,CAAC;KACR;IAED;;;;;;;;;;;OAWG;;;;;;;;;;;;;IAIH,iCAAa;;;;;;;;;;;;cAAC,OAAwB;QACpC,MAAM,CAAC;KACR;IAED;;;;;;OAMG;;;;;;;;IAIH,0CAAsB;;;;;;;cACpB,OAA0B;QAE1B,MAAM,CAAC;KACR;;gBAjDF,UAAU;;;QASR,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;+CAGD;;QAcA,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;;;kDAGD;;QASA,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;2DAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAhDU,SAAS;QAXrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,sDAAsD;YAC5D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;YAC7B,OAAO,EACL,+EAA+E;YACjF,gBAAgB,EAAE,EAAE;SACrB,CAAC;OAEW,SAAS,EAiDrB;oBAhQD;EA+M+B,iBAAiB;SAAnC,SAAS","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * Options for the setupApplePay method.\n */\nexport interface ApplePayOptions {\n  /**\n   * Apple Merchant ID - can be obtained from the Apple Developer Portal.\n   */\n  merchantId: string;\n\n  /**\n   * The currency in which to receive payment.\n   * This is a 3 letter currency code (ISO-4217) - e.g. \"GBP\", \"USD\", \"MXN\", etc.\n   */\n  currency: string;\n\n  /**\n   * The locale in which payment is accepted.\n   * This is a 2 letter country code (ISO-3166-1) - e.g. \"GB\", \"US\", \"MX\"\n   */\n  country: string;\n}\n\n/**\n * Options for the presentDropInPaymentUI method.\n */\nexport interface PaymentUIOptions {\n  /**\n   * The amount of the transaction to show in the drop-in UI on the\n   * summary row as well as the call-to-action button, as a string.\n   * If not provided, this value will default to \"0.00\", e.g. free.\n   * Unless you are simply capturing authorizations, you probably\n   * want to fill this value in!\n   */\n  amount?: string;\n\n  /**\n   * The description of the transaction to show in the drop-in UI on the summary row.\n   * Defaults to empty string.\n   */\n  primaryDescription?: string;\n}\n\n/**\n * Successful callback result for the presentDropInPaymentUI method.\n */\nexport interface PaymentUIResult {\n  /**\n   * Indicates if the user used the cancel button to close the dialog without\n   * completing the payment.\n   */\n  userCancelled: boolean;\n\n  /**\n   * The nonce returned for the payment transaction (if a payment was completed).\n   */\n  nonce: string;\n\n  /**\n   * The payment type (if a payment was completed) (credit card, check, paypal, etc).\n   */\n  type: string;\n\n  /**\n   * A description of the payment method (if a payment was completed).\n   */\n  localizedDescription: string;\n\n  /**\n   * Information about the credit card used to complete a payment (if a credit card was used).\n   */\n  card: {\n    /**\n     * The last two digits of the credit card used.\n     */\n    lastTwo: string;\n\n    /**\n     * An enumerated value used to indicate the type of credit card used.\n     *\n     * Can be one of the following values:\n     *\n     * BTCardNetworkUnknown\n     * BTCardNetworkAMEX\n     * BTCardNetworkDinersClub\n     * BTCardNetworkDiscover\n     * BTCardNetworkMasterCard\n     * BTCardNetworkVisa\n     * BTCardNetworkJCB\n     * BTCardNetworkLaser\n     * BTCardNetworkMaestro\n     * BTCardNetworkUnionPay\n     * BTCardNetworkSolo\n     * BTCardNetworkSwitch\n     * BTCardNetworkUKMaestro\n     */\n    network: string;\n  };\n\n  /**\n   * Information about the PayPal account used to complete a payment (if a PayPal account was used).\n   */\n  payPalAccount: {\n    email: string;\n    firstName: string;\n    lastName: string;\n    phone: string;\n    billingAddress: string;\n    shippingAddress: string;\n    clientMetadataId: string;\n    payerId: string;\n  };\n\n  /**\n   * Information about the Apple Pay card used to complete a payment (if Apple Pay was used).\n   */\n  applePaycard: {};\n\n  /**\n   * Information about 3D Secure card used to complete a payment (if 3D Secure was used).\n   */\n  threeDSecureCard: {\n    liabilityShifted: boolean;\n    liabilityShiftPossible: boolean;\n  };\n\n  /**\n   * Information about Venmo account used to complete a payment (if a Venmo account was used).\n   */\n  venmoAccount: {\n    username: string;\n  };\n}\n\n/**\n * @name Braintree\n * @description\n * This plugin enables the use of the Braintree Drop-In Payments UI in your Ionic applications on Android and iOS, using the native Drop-In UI for each platform (not the Javascript SDK).\n *\n *  Ionic Native utilizes [a maintained fork](https://github.com/taracque/cordova-plugin-braintree) of the original `cordova-plugin-braintree`\n *\n *  For information on how to use Apple Pay with this plugin, please refer to the [plugin documentation](https://github.com/Taracque/cordova-plugin-braintree#apple-pay-ios-only)\n *\n * **NOTE**: This is not a complete payments solution. All of the Braintree client-side UIs simply generate a payment nonce that must then be processed by your server to complete the payment.\n * See the [Braintree Node server documentation](https://developers.braintreepayments.com/start/hello-server/node) for details and a [sample Express server](https://github.com/braintree/braintree_express_example) that implements the required functionality.\n *\n * @usage\n * ```typescript\n * import { Braintree, ApplePayOptions, PaymentUIOptions } from '@ionic-native/braintree';\n *\n * constructor(private braintree: Braintree) { }\n *\n * ...\n *\n * // Your Braintree `Tokenization Key` from the Braintree dashboard.\n * // Alternatively you can also generate this token server-side\n * // using a client ID in order to allow users to use stored payment methods.\n * // See the [Braintree Client Token documentation](https://developers.braintreepayments.com/reference/request/client-token/generate/node#customer_id) for details.\n * const BRAINTREE_TOKEN = '<YOUR_BRAINTREE_TOKEN>';\n *\n * // NOTE: Do not provide this unless you have configured your Apple Developer account\n * // as well as your Braintree merchant account, otherwise the Braintree module will fail.\n * const appleOptions: ApplePayOptions = {\n *   merchantId: '<YOUR MERCHANT ID>',\n *   currency: 'USD',\n *   country: 'US'\n * };\n *\n * const paymentOptions: PaymentUIOptions = {\n *   amount: '14.99',\n *   primaryDescription: 'Your product or service (per /item, /month, /week, etc)',\n * };\n *\n * this.braintree.initialize(BRAINTREE_TOKEN)\n *   .then(() => this.braintree.setupApplePay(appleOptions))\n *   .then(() => this.braintree.presentDropInPaymentUI(paymentOptions))\n *   .then((result: PaymentUIResult) => {\n *     if (result.userCancelled) {\n *       console.log(\"User cancelled payment dialog.\");\n *     } else {\n *       console.log(\"User successfully completed payment!\");\n *       console.log(\"Payment Nonce: \" + result.nonce);\n *       console.log(\"Payment Result.\", result);\n *     }\n *   })\n *   .catch((error: string) => console.error(error));\n *\n * ```\n *\n * @interfaces\n * ApplePayOptions\n * PaymentUIOptions\n * PaymentUIResult\n */\n@Plugin({\n  pluginName: 'Braintree',\n  plugin: 'cordova-plugin-braintree',\n  pluginRef: 'BraintreePlugin',\n  repo: 'https://github.com/taracque/cordova-plugin-braintree',\n  platforms: ['Android', 'iOS'],\n  install:\n    'ionic cordova plugin add https://github.com/taracque/cordova-plugin-braintree',\n  installVariables: []\n})\n@Injectable()\nexport class Braintree extends IonicNativePlugin {\n  /**\n   * Used to initialize the Braintree client. This function must be called before other methods can be used.\n   *  As the initialize code is async, be sure you call all Braintree related methods after the initialize promise has resolved.\n   *\n   * @param {string} token The client token or tokenization key to use with the Braintree client.\n   * @return {Promise<undefined | string>} Returns a promise that resolves with undefined on successful initialization, or rejects with a string message describing the failure.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS']\n  })\n  initialize(token: string): Promise<undefined | string> {\n    return;\n  }\n\n  /**\n   * Used to configure Apple Pay on iOS.\n   *  In order for Apple Pay payments to appear on the Drop-In Payments UI, you must initialize the Apple Pay framework before using the Drop-In Payments UI.\n   *\n   *  Do not turn on Apple Pay in Braintree if you don't have Apple Pay entitlements - the Braintree module will reject the attempt to set up Apple Pay.\n   *  Please refer to the [Braintree Merchant Documentation](https://developers.braintreepayments.com/guides/apple-pay/configuration/ios/v4#apple-pay-certificate-request-and-provisioning) to set up a Merchant Account.\n   *\n   *  Calling this function on Android is a `noop` so you can call it without having to check which cordova platform you are on! :D\n   *\n   * @param {ApplePayOptions}options The options used to configure Apple Pay.\n   * @return {Promise<undefined | string>} Returns a promise that resolves with undefined on successful initialization, or rejects with a string message describing the failure.\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  setupApplePay(options: ApplePayOptions): Promise<undefined | string> {\n    return;\n  }\n\n  /**\n   * Shows Braintree's Drop-In Payments UI.\n   *  Apple Pay is only shown in the Drop In UI if you have previously called `setupApplePay`.\n   *\n   * @param options {PaymentUIOptions} An optional argument used to configure the payment UI; see type definition for parameters. If not provided, the UI will show \"0.00\" as the price and an empty description.\n   * @return {Promise<PaymentUIResult | string>} Returns a promise that resolves with a PaymentUIResult object on successful payment (or the user cancels), or rejects with a string message describing the failure.\n   */\n  @Cordova({\n    platforms: ['Android', 'iOS']\n  })\n  presentDropInPaymentUI(\n    options?: PaymentUIOptions\n  ): Promise<PaymentUIResult | string> {\n    return;\n  }\n}\n"]}